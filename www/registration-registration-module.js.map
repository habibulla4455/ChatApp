{"version":3,"sources":["webpack:///./src/app/landing-page/registration/registration-routing.module.ts","webpack:///./src/app/landing-page/registration/registration.component.html","webpack:///./src/app/landing-page/registration/registration.component.scss","webpack:///./src/app/landing-page/registration/registration.component.ts","webpack:///./src/app/landing-page/registration/registration.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEU;AAEjE,IAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,6EAAqB,EAAE;CAC/C,CAAC;AAMF;IAAA;IAAyC,CAAC;IAA7B,yBAAyB;QAJrC,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,yBAAyB,CAAI;IAAD,gCAAC;CAAA;AAAJ;;;;;;;;;;;;ACbtC,uxE;;;;;;;;;;;ACAA,8BAA8B,kBAAkB,kBAAkB,EAAE,0BAA0B,kBAAkB,6BAA6B,wBAAwB,EAAE,kCAAkC,uBAAuB,4BAA4B,EAAE,0CAA0C,oBAAoB,EAAE,6CAA6C,qBAAqB,4BAA4B,EAAE,G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACApW;AAC6C;AAEvB;AAEhF,IAAM,YAAY,GAAW,yJAAyJ,CAAC;AAOvL;IAME,+BAAwC,EAAe,EAAU,gBAAkC;QAA3D,OAAE,GAAF,EAAE,CAAa;QAAU,qBAAgB,GAAhB,gBAAgB,CAAkB;QACjG,+BAA+B;QAC/B,qHAAqH;QACrH,8GAA8G;QAC9G,6FAA6F;QAC7F,0IAA0I;QAC1I,KAAK;QACL,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC;YACzB,OAAO,EAAE,CAAE,EAAE,EAAE,CAAE,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,eAAe,CAAC,YAAY,CAAE,CAAE;YACxG,UAAU,EAAE,CAAE,EAAE,EAAE,CAAE,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,YAAY,CAAE,CAAE;YAClG,SAAS,EAAE,CAAE,EAAE,EAAE,CAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,eAAe,CAAC,YAAY,CAAE,CAAE;YACjF,SAAS,EAAE,CAAE,EAAE,EAAE,CAAE,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,YAAY,EAAE,eAAe,CAAC,YAAY,CAAE,CAAE;SAChI,CAAC;IACJ,CAAC;IAED,wCAAQ,GAAR;QAAA,iBAQC;QAPC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC;QAE9C,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,QAAQ;YAC9C,IAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;YACnC,KAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sBAAI,wCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;QAC7C,CAAC;;;OAAA;IAED,sBAAI,2CAAQ;aAAZ;YACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;QAChD,CAAC;;;OAAA;IAED,sBAAI,0CAAO;aAAX;YACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;QAC/C,CAAC;;;OAAA;IAED,sBAAI,0CAAO;aAAX;YACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;QAC/C,CAAC;;;OAAA;IAED,4CAAY,GAAZ,UAAa,OAAwB;QACnC,IAAM,SAAS,GAAG,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC,OAAO,CAAC;QACjD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;IACnD,CAAC;IAED,wCAAQ,GAAR;QAAA,iBAkBC;QAjBC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YAC5B,KAAK,CAAC,kCAAkC,CAAC,CAAC;YAC1C,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;aACvD,KAAK,CAAC,UAAC,CAAC;YAEP,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAM,KAAK,GAAG,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC;YAC1C,KAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;YACxB,KAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,KAAK,SAAE,CAAC,CAAC;YACtC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC;QAElB,CAAC,CAAC,CAAC;IACP,CAAC;IAtEU,qBAAqB;QALjC,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;;SAG7B,CAAC;QAOa,uEAAM,CAAC,0DAAW,CAAC;yCAAY,0DAAW,EAA4B,wFAAgB;OANxF,qBAAqB,CAwEjC;IAAD,4BAAC;CAAA;AAxEiC;AA0ElC;IAAA;IASA,CAAC;IARQ,4BAAY,GAAnB,UAAoB,OAAwB;QAC1C,IAAM,wBAAwB,GAAW,OAAO,CAAC;QACjD,MAAM,CAAC,wBAAwB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;IACvF,CAAC;IACM,4BAAY,GAAnB,UAAoB,OAAwB;QAC1C,IAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;QACrD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;IACnD,CAAC;IACH,sBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/FgE;AAClB;AACM;AAEqB;AACG;AAEZ;AAgBjE;IAAA;IAAkC,CAAC;IAAtB,kBAAkB;QAd9B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,kEAAmB;gBACnB,sFAAyB;gBACzB,qFAAe;aAChB;YACD,YAAY,EAAE;gBACZ,6EAAqB;aACtB;YACD,OAAO,EAAE;gBACP,oEAAsB;aACvB;SACF,CAAC;OACW,kBAAkB,CAAI;IAAD,yBAAC;CAAA;AAAJ","file":"registration-registration-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegistrationComponent } from './registration.component';\n\nconst routes: Routes = [\n  { path: '', component: RegistrationComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegistrationRoutingModule { }\n","module.exports = \"<div id=\\\"container\\\">\\n\\n  <mat-card>\\n    <mat-card-content>\\n\\n      <div>\\n        <p id=\\\"header\\\">Registration</p>\\n      </div>\\n\\n      <form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"signupForm\\\">\\n        <mat-form-field color=\\\"accent\\\">\\n          <mat-label>Email</mat-label>\\n          <input matInput type=\\\"text\\\" formControlName=\\\"email\\\">\\n          <mat-error *ngIf=\\\"signupForm.get('email').invalid\\\">\\n            <mat-error *ngIf=\\\"email.required\\\">This is required.</mat-error>\\n            <mat-error *ngIf=\\\"email.pattern\\\">Not a valid email address.</mat-error>\\n          </mat-error>\\n        </mat-form-field>\\n        <mat-form-field color=\\\"accent\\\">\\n          <mat-label>Password</mat-label>\\n          <input matInput type=\\\"password\\\" formControlName=\\\"password\\\">\\n          <mat-error *ngIf=\\\"signupForm.get('password').invalid\\\">\\n            <mat-error *ngIf=\\\"password.required\\\">This is required.</mat-error>\\n            <mat-error *ngIf=\\\"password.minlength\\\">Password too short.</mat-error>\\n          </mat-error>\\n        </mat-form-field>\\n        <mat-form-field color=\\\"accent\\\">\\n          <mat-label>Confirm assword</mat-label>\\n          <input matInput type=\\\"password\\\" formControlName=\\\"confirm\\\">\\n          <mat-error *ngIf=\\\"signupForm.get('confirm').invalid\\\">\\n            <mat-error *ngIf=\\\"confirm.isNotMatched\\\">Password not matched.</mat-error>\\n          </mat-error>\\n        </mat-form-field>\\n        <mat-form-field color=\\\"accent\\\">\\n          <mat-label>Display name</mat-label>\\n          <input matInput type=\\\"text\\\" formControlName=\\\"display\\\">\\n          <mat-error *ngIf=\\\"signupForm.get('display').invalid\\\">\\n            <mat-error *ngIf=\\\"display.required\\\">This is required.</mat-error>\\n            <mat-error *ngIf=\\\"display.minlength\\\">Display name too short.</mat-error>\\n            <mat-error *ngIf=\\\"display.containsAlpha && !display.containsNone\\\">Must contain atleast 1 lowercase character.</mat-error>\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <button mat-raised-button>CREATE ACCOUNT</button>\\n      </form>\\n\\n    </mat-card-content>\\n    <mat-card-footer *ngIf=\\\"isSigningin\\\">\\n      <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\n    </mat-card-footer>\\n  </mat-card>\\n\\n</div>\\n\"","module.exports = \"#container {\\n  display: flex;\\n  height: 100vh; }\\n  #container .mat-card {\\n    width: 80vw;\\n    margin: 20vh auto auto;\\n    padding-bottom: 0; }\\n  #container .mat-card #header {\\n      font-size: 2em;\\n      margin-bottom: 10px; }\\n  #container .mat-card .mat-form-field {\\n      width: 100%; }\\n  #container .mat-card .mat-raised-button {\\n      float: right;\\n      margin-bottom: 24px; }\\n\"","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, ValidationErrors, AbstractControl } from '@angular/forms';\n\nimport { FirestoreService } from '../../common/core/services/firestore.service';\n\nconst EMAILPATTERN: RegExp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss']\n})\nexport class RegistrationComponent implements OnInit {\n\n  signupForm: FormGroup;\n  current: string;\n  isSigningin: boolean;\n\n  constructor(@Inject(FormBuilder) public fb: FormBuilder, private firestoreService: FirestoreService) {\n    // this.signupForm = fb.group({\n    //   'email': [ 'q@q.com', [ Validators.required, Validators.pattern(EMAILPATTERN), CustomValidator.containsNone ] ],\n    //   'password': [ '123123', [ Validators.required, Validators.minLength(6), CustomValidator.containsNone ] ],\n    //   'confirm': [ '123123', [ this.confirmCheck.bind(this), CustomValidator.containsNone ] ],\n    //   'display': [ 'madara', [ Validators.required, Validators.minLength(6), CustomValidator.containAlpha, CustomValidator.containsNone ] ]\n    // })\n    this.signupForm = fb.group({\n      'email': [ '', [ Validators.required, Validators.pattern(EMAILPATTERN), CustomValidator.containsNone ] ],\n      'password': [ '', [ Validators.required, Validators.minLength(6), CustomValidator.containsNone ] ],\n      'confirm': [ '', [ this.confirmCheck.bind(this), CustomValidator.containsNone ] ],\n      'display': [ '', [ Validators.required, Validators.minLength(6), CustomValidator.containAlpha, CustomValidator.containsNone ] ]\n    })\n  }\n\n  ngOnInit() {\n    this.isSigningin = false;\n    this.current = this.signupForm.value.password;\n\n    this.signupForm.valueChanges.subscribe((response) => {\n      const password = response.password;\n      this.current = password;\n    });\n  }\n\n  get email(): ValidationErrors {\n    return this.signupForm.get('email').errors;\n  }\n\n  get password(): ValidationErrors {\n    return this.signupForm.get('password').errors;\n  }\n\n  get confirm(): ValidationErrors {\n    return this.signupForm.get('confirm').errors;\n  }\n\n  get display(): ValidationErrors {\n    return this.signupForm.get('display').errors;\n  }\n\n  confirmCheck(control: AbstractControl): ValidationErrors | null {\n    const condition = control.value === this.current;\n    return condition ? null : { isNotMatched: true };\n  }\n\n  onSubmit() {\n    if (this.signupForm.invalid) {\n      alert('Input invalid. Please try again.');\n      return;\n    }\n\n    this.isSigningin = true;\n\n    this.firestoreService.createNewUser(this.signupForm.value)\n      .catch((e) => {\n\n        this.isSigningin = false;\n        const email = this.signupForm.value.email;\n        this.signupForm.reset();\n        this.signupForm.patchValue({ email });\n        alert(e.message)\n\n      });\n  }\n\n}\n\nexport class CustomValidator {\n  static containAlpha(control: AbstractControl): ValidationErrors | null {\n    const CONTAIN_LOWERCASE_REGEXP: RegExp = /[a-z]/;\n    return CONTAIN_LOWERCASE_REGEXP.test(control.value) ? null : { containsAlpha: true };\n  }\n  static containsNone(control: AbstractControl): ValidationErrors | null {\n    const condition = String(control.value).length !== 0;\n    return condition ? null : { containsNone: true };\n  }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { RegistrationRoutingModule } from './registration-routing.module';\nimport { Material2Module } from '../../common/core/modules/material2.module';\n\nimport { RegistrationComponent } from './registration.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RegistrationRoutingModule,\n    Material2Module\n  ],\n  declarations: [\n    RegistrationComponent\n  ],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA\n  ]\n})\nexport class RegistrationModule { }\n"],"sourceRoot":""}