{"version":3,"sources":["webpack:///./src/app/common/core/services/preference.service.ts","webpack:///./src/app/common/shared/components/cloud-queue-dialog/cloud-queue-dialog.component.html","webpack:///./src/app/common/shared/components/cloud-queue-dialog/cloud-queue-dialog.component.scss","webpack:///./src/app/common/shared/components/cloud-queue-dialog/cloud-queue-dialog.component.ts","webpack:///./src/app/common/shared/components/reauth-dialog/reauth-dialog.component.html","webpack:///./src/app/common/shared/components/reauth-dialog/reauth-dialog.component.scss","webpack:///./src/app/common/shared/components/reauth-dialog/reauth-dialog.component.ts","webpack:///./src/app/common/shared/components/update-confirmation-dialog/update-confirmation-dialog.component.html","webpack:///./src/app/common/shared/components/update-confirmation-dialog/update-confirmation-dialog.component.scss","webpack:///./src/app/common/shared/components/update-confirmation-dialog/update-confirmation-dialog.component.ts","webpack:///./src/app/dashboard/preferences/preferences-routing.module.ts","webpack:///./src/app/dashboard/preferences/preferences.component.html","webpack:///./src/app/dashboard/preferences/preferences.component.scss","webpack:///./src/app/dashboard/preferences/preferences.component.ts","webpack:///./src/app/dashboard/preferences/preferences.module.ts"],"names":[],"mappings":"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","file":"preferences-preferences-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { AngularFireAuth } from 'angularfire2/auth';\nimport { AngularFireStorage } from 'angularfire2/storage';\n// import { DocumentChangeType, DocumentChange, QueryDocumentSnapshot, QuerySnapshot } from '@firebase/firestore-types';\nimport { take } from 'rxjs/operators';\nimport * as firebase from 'firebase';\n\nimport { FirestoreService } from './firestore.service';\n\nimport { Upload } from '../../shared/models/model';\n\n// interface DocumentChangeAction { type: DocumentChangeType; payload: DocumentChange; }\n\n@Injectable()\nexport class PreferenceService {\n\n  constructor(private dialog: MatDialog, private auth: AngularFireAuth, private firestore: FirestoreService, private storage: AngularFireStorage) { }\n\n  updateDisplay(form: any) {\n\n    this.auth.auth.currentUser.updateProfile({\n      displayName: form.display,\n      photoURL: ''\n    }).then(() => (this.firestoreChange('display', form.display)));\n\n  }\n\n  updateEmailI(form: any) {\n    const email = this.auth.auth.currentUser.email;\n    const password = form.password;\n\n    this.auth.auth.signInWithEmailAndPassword(email, password)\n      .then((user) => {\n        user.updateEmail(form.email).then(() => (this.firestoreChange('email', form.email)));\n      }).catch((e) => {\n        alert(e.message);\n        this.dialog.closeAll();\n      });\n\n  }\n\n  updatePassword(form: any) {\n    const email = this.auth.auth.currentUser.email;\n    const password = form.currentPassword;\n\n    this.auth.auth.signInWithEmailAndPassword(email, password)\n      .then((user) => {\n        user.updatePassword(form.password).then(() => (this.firestoreChange('password', form.password)));\n      }).catch((e) => {\n        alert(e.message);\n        this.dialog.closeAll();\n      });\n  }\n\n  updateAvatar(form: Upload, newUrl: string) {\n\n    newUrl === '' ? this.firestoreFromFile(form) : this.firestoreFromLink(newUrl);\n\n  }\n\n  private firestoreFromFile(upload: Upload) {\n\n    const uploadTask = this.storage.ref(`avatars/${upload.file.name}`).put(upload.file);\n    uploadTask.snapshotChanges().map((snapshot) => {\n\n      let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n      console.log(progress);\n\n    }).subscribe(() => { });\n\n\n    uploadTask.task\n      .then((snapshot) => {\n        snapshot.ref.getDownloadURL()\n          .then((url) => {\n            upload.totalBytes = snapshot.totalBytes;\n            upload.url = url;\n            upload.fileName = snapshot.metadata.name;\n            upload.contentType = snapshot.metadata.contentType;\n            upload.timeCreated = snapshot.metadata.timeCreated;\n            delete upload.file;\n\n            console.log({ avatar: { ...upload } });\n            this.firestoreChange('avatar', { avatar: { ...upload } });\n          })\n      })\n\n  }\n\n  private firestoreFromLink(newUrl: string) {\n    this.firestore.usersRef.snapshotChanges().pipe( take(1) ).map((action: any[]) => {\n      const uid = this.auth.auth.currentUser.uid;\n      return action.map((change: any) => {\n        const document = <any>change.payload.doc;\n\n        if (document.get('uid') === uid) {\n          const avatar = { avatar: { url: newUrl } };\n          document.ref.set(avatar, { merge: true });\n        }\n\n        return document.data();\n      })\n    }).subscribe(() => {\n\n      alert(`Successfully changed your avatar.`);\n      this.dialog.closeAll();\n\n    });\n  }\n\n  private firestoreChange(option: string, form: any) {\n    this.firestore.usersRef.snapshotChanges().pipe( take(1) ).map((action: any[]) => {\n      const uid = this.auth.auth.currentUser.uid;\n      return action.map((change: any) => {\n        const document = <any>change.payload.doc;\n\n        if (option === 'avatar') {\n          document.get('uid') === uid ? document.ref.set(form, { merge: true }) : 0;\n        } else {\n          document.get('uid') === uid ? document.ref.update(option, form) : 0;\n        }\n\n        return document.data();\n      })\n    }).subscribe(() => {\n\n      switch(option) {\n        case 'display':\n          alert(`Display name successfully changed to ${form}.`);\n          break;\n        case 'email':\n          alert(`Email address successfully changed to ${form}.`);\n          break;\n        case 'password':\n          alert(`Password successfully changed.`);\n          break;\n        case 'avatar':\n          alert(`Successfully changed your avatar.`);\n          break;\n        default: break;\n      }\n\n      this.dialog.closeAll();\n\n    });\n  }\n\n}\n","module.exports = \"<div id=\\\"container\\\">\\n  <form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"urlForm\\\">\\n    <mat-form-field color=\\\"accent\\\">\\n      <mat-label>Image url</mat-label>\\n      <input matInput type=\\\"text\\\" formControlName=\\\"url\\\">\\n      <mat-error *ngIf=\\\"this.urlForm.get('url').invalid\\\">\\n        <mat-error *ngIf=\\\"url.required\\\">This is required.</mat-error>\\n        <mat-error *ngIf=\\\"url.pattern\\\">Invalid url.</mat-error>\\n      </mat-error>\\n    </mat-form-field>\\n    <button mat-raised-button>SELECT</button>\\n  </form>\\n</div>\\n\"","module.exports = \"#container {\\n  width: 50vw; }\\n  #container .mat-raised-button {\\n    width: 100%; }\\n\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\n\nconst URL_PATTERN: RegExp = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/;\n\n@Component({\n  selector: 'app-cloud-queue-dialog',\n  templateUrl: './cloud-queue-dialog.component.html',\n  styleUrls: ['./cloud-queue-dialog.component.scss']\n})\nexport class CloudQueueDialogComponent implements OnInit {\n\n  urlForm: FormGroup;\n\n  constructor(@Inject(FormBuilder) public fb: FormBuilder, @Inject(MAT_DIALOG_DATA) data: any, private dialogRef: MatDialogRef<CloudQueueDialogComponent>) {\n    this.urlForm = fb.group({\n      'url': [ 'https://i.pinimg.com/originals/dd/5f/c6/dd5fc62d91748e581b3101101be9bf65.gif', [ Validators.required, Validators.pattern(URL_PATTERN) ] ],\n    })\n  }\n\n  ngOnInit() {\n  }\n\n  get url() {\n    return this.urlForm.get('url').errors;\n  }\n\n  onSubmit() {\n    if (this.urlForm.invalid) return;\n    this.dialogRef.close(this.urlForm.value)\n  }\n\n}\n","module.exports = \"<div id=\\\"container\\\">\\n\\n  <form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"passwordForm\\\">\\n    <mat-form-field color=\\\"accent\\\">\\n      <mat-label>Password</mat-label>\\n      <input matInput type=\\\"password\\\" formControlName=\\\"password\\\">\\n      <mat-error *ngIf=\\\"passwordForm.invalid\\\">This is required.</mat-error>\\n    </mat-form-field>\\n    <button mat-raised-button>LOGIN</button>\\n  </form>\\n\\n</div>\\n\"","module.exports = \"#container {\\n  width: 50vw; }\\n  #container .mat-raised-button {\\n    width: 100%; }\\n\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material';\n\n@Component({\n  selector: 'app-reauth-dialog',\n  templateUrl: './reauth-dialog.component.html',\n  styleUrls: ['./reauth-dialog.component.scss']\n})\nexport class ReauthDialogComponent implements OnInit {\n\n  passwordForm: FormGroup;\n\n  constructor(@Inject(FormBuilder) public fb: FormBuilder, private dialogRef: MatDialogRef<ReauthDialogComponent>) {\n    this.passwordForm = fb.group({\n      'password': [ '', [  Validators.required ] ],\n    })\n  }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    const password = this.passwordForm.value.password;\n    this.dialogRef.close(password);\n  }\n\n}\n","module.exports = \"<mat-card>\\n  <mat-card-content>\\n    <div id=\\\"container\\\">\\n      <p>Save changes?</p>\\n\\n      <base href=\\\"#\\\" target=\\\"_blank\\\">\\n\\n      <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onCancel()\\\" id=\\\"cancel\\\">CANCEL</button>\\n      <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onUpdate()\\\" id=\\\"update\\\">UPDATE</button>\\n    </div>\\n  </mat-card-content>\\n  <mat-card-footer *ngIf=\\\"isShow\\\">\\n    <mat-progress-bar mode=\\\"indeterminate\\\" [color]=\\\"color\\\"></mat-progress-bar>\\n  </mat-card-footer>\\n</mat-card>\\n\"","module.exports = \".mat-card {\\n  margin: -24px; }\\n\\np {\\n  font-size: 1.25em;\\n  text-align: center; }\\n\\n#cancel {\\n  margin-right: 2vw; }\\n\\n#update {\\n  margin-left: 2vw; }\\n\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\nimport { PreferenceService } from '../../../core/services/preference.service';\n\n@Component({\n  selector: 'app-update-confirmation-dialog',\n  templateUrl: './update-confirmation-dialog.component.html',\n  styleUrls: ['./update-confirmation-dialog.component.scss']\n})\nexport class UpdateConfirmationDialogComponent implements OnInit {\n\n  isShow: boolean = false;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any, private dialogRef: MatDialogRef<UpdateConfirmationDialogComponent>, private preferenceService: PreferenceService) { }\n\n  ngOnInit() {\n  }\n\n  onCancel() {\n    this.dialogRef.close();\n  }\n\n  onUpdate() {\n    this.isShow = true;\n\n    switch(this.data.option) {\n      case 'display':\n        this.updateDisplay();\n        break;\n      case 'email':\n        this.updateEmailI();\n        break;\n      case 'password':\n        this.updatePassword();\n        break;\n      case 'avatar':\n        this.updateAvatar();\n        break;\n      default: break;\n    }\n  }\n\n  updateDisplay() {\n    const form = this.data.form;\n    this.preferenceService.updateDisplay(form);\n  }\n\n  updateEmailI() {\n    const form = this.data.form;\n    this.preferenceService.updateEmailI(form);\n  }\n\n  updatePassword() {\n    const form = this.data.form;\n    this.preferenceService.updatePassword(form);\n  }\n\n  updateAvatar() {\n    const form = this.data.form;\n    const newUrl = this.data.newUrl;\n    this.preferenceService.updateAvatar(form, newUrl);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PreferencesComponent } from './preferences.component';\n\nconst routes: Routes = [\n  { path: '', component: PreferencesComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PreferencesRoutingModule { }\n","module.exports = \"<div id=\\\"container\\\">\\n\\n  <div id=\\\"accordion-container\\\">\\n    <form [formGroup]=\\\"preferencesForm\\\">\\n      <mat-accordion [displayMode]=\\\"'default'\\\" [multi]=\\\"false\\\">\\n\\n        <mat-expansion-panel #display>\\n          <mat-expansion-panel-header>\\n            <mat-panel-title>Update display name</mat-panel-title>\\n          </mat-expansion-panel-header>\\n          <ng-template matExpansionPanelContent>\\n\\n            <div formGroupName=\\\"updateDisplay\\\">\\n              <mat-form-field appearance=\\\"outline\\\" color=\\\"accent\\\">\\n                <mat-label>New display name</mat-label>\\n                <input matInput type=\\\"text\\\" formControlName=\\\"display\\\">\\n                <mat-error *ngIf=\\\"this.preferencesForm.get('updateDisplay').get('display').invalid\\\">\\n                  <mat-error *ngIf=\\\"displayError.required; else error\\\">This is required.</mat-error>\\n                  <ng-template #error>\\n                    <mat-error *ngIf=\\\"displayError.minlength; else error2\\\">Display name too short.</mat-error>\\n                    <ng-template #error2>\\n                      <mat-error *ngIf=\\\"displayError.containsAlpha && !display.containsNone\\\">Must contain atleast 1 lowercase character.</mat-error>\\n                    </ng-template>\\n                  </ng-template>\\n                </mat-error>\\n              </mat-form-field>\\n            </div>\\n\\n            <mat-action-row>\\n              <button mat-button color=\\\"accent\\\" type=\\\"button\\\" (click)=\\\"onSubmit('display')\\\">UPDATE</button>\\n            </mat-action-row>\\n\\n          </ng-template>\\n        </mat-expansion-panel>\\n\\n        <mat-expansion-panel #email>\\n          <mat-expansion-panel-header>\\n            <mat-panel-title>Update email address</mat-panel-title>\\n          </mat-expansion-panel-header>\\n          <ng-template matExpansionPanelContent>\\n\\n            <div formGroupName=\\\"updateEmail\\\">\\n              <mat-form-field appearance=\\\"outline\\\" color=\\\"accent\\\">\\n                <mat-label>New email address</mat-label>\\n                <input matInput type=\\\"text\\\" formControlName=\\\"email\\\">\\n                <mat-error *ngIf=\\\"this.preferencesForm.get('updateEmail').get('email').invalid\\\">\\n                  <mat-error *ngIf=\\\"emailError.required\\\">This is required.</mat-error>\\n                  <mat-error *ngIf=\\\"emailError.pattern\\\">Not a valid email address.</mat-error>\\n                </mat-error>\\n              </mat-form-field>\\n            </div>\\n\\n            <mat-action-row>\\n              <button mat-button color=\\\"accent\\\" type=\\\"button\\\" (click)=\\\"onSubmit('email')\\\">UPDATE</button>\\n            </mat-action-row>\\n\\n          </ng-template>\\n        </mat-expansion-panel>\\n\\n        <mat-expansion-panel #password>\\n          <mat-expansion-panel-header>\\n            <mat-panel-title>Update password</mat-panel-title>\\n          </mat-expansion-panel-header>\\n          <ng-template matExpansionPanelContent>\\n\\n            <div formGroupName=\\\"updatePassword\\\">\\n              <mat-form-field appearance=\\\"outline\\\" color=\\\"accent\\\">\\n                <mat-label>New password</mat-label>\\n                <input matInput type=\\\"password\\\" formControlName=\\\"password\\\">\\n                <mat-error *ngIf=\\\"this.preferencesForm.get('updatePassword').get('password').invalid\\\">\\n                  <mat-error *ngIf=\\\"passwordError.required\\\">This is required.</mat-error>\\n                  <mat-error *ngIf=\\\"passwordError.minlength\\\">Password too short.</mat-error>\\n                </mat-error>\\n              </mat-form-field>\\n              <mat-form-field appearance=\\\"outline\\\" color=\\\"accent\\\">\\n                <mat-label>Repeat new password</mat-label>\\n                <input matInput type=\\\"password\\\" formControlName=\\\"confirm\\\">\\n                <mat-error *ngIf=\\\"this.preferencesForm.get('updatePassword').get('confirm').invalid\\\">\\n                  <mat-error *ngIf=\\\"confirmError.required\\\">This is required.</mat-error>\\n                  <mat-error *ngIf=\\\"confirmError.isNotMatched\\\">Password not matched.</mat-error>\\n                </mat-error>\\n              </mat-form-field>\\n            </div>\\n            <mat-action-row>\\n              <button mat-button color=\\\"accent\\\" type=\\\"button\\\" (click)=\\\"onSubmit('password')\\\">UPDATE</button>\\n            </mat-action-row>\\n\\n          </ng-template>\\n        </mat-expansion-panel>\\n\\n        <mat-expansion-panel #avatar>\\n          <mat-expansion-panel-header>\\n            <mat-panel-title>Change avatar</mat-panel-title>\\n          </mat-expansion-panel-header>\\n          <ng-template matExpansionPanelContent>\\n\\n            <div>\\n              <div *ngIf=\\\"newUrl === ''; else url\\\" id=\\\"img-container\\\">\\n                <img src=\\\"{{ upload?.url || (user | async)?.avatar?.url }}\\\" alt=\\\"god-madara-uchiha\\\" width=\\\"200\\\" height=\\\"200\\\">\\n              </div>\\n              <ng-template #url>\\n                <div id=\\\"img-container\\\">\\n                  <img src=\\\"{{ newUrl }}\\\" alt=\\\"god-madara-uchiha\\\" width=\\\"200\\\" height=\\\"200\\\" (load)=\\\"showClear = true\\\">\\n                </div>\\n              </ng-template>\\n            </div>\\n\\n            <div id=\\\"btn-container\\\">\\n              <div class=\\\"m-auto\\\">\\n                <input type=\\\"file\\\" #file class=\\\"d-none\\\" (change)=\\\"onChange($event)\\\">\\n                <button mat-icon-button type=\\\"button\\\" color=\\\"accent\\\" (click)=\\\"file.click()\\\">\\n                  <mat-icon>photo</mat-icon>\\n                </button>\\n                <button mat-icon-button type=\\\"button\\\" color=\\\"accent\\\" (click)=\\\"cloudQueue()\\\">\\n                  <mat-icon>cloud_queue</mat-icon>\\n                </button>\\n              </div>\\n              <div class=\\\"m-auto\\\">\\n                <span *ngIf=\\\"upload?.url?.length > 0\\\">{{ upload?.name }}</span>\\n                <button mat-icon-button button1 color=\\\"accent\\\" (click)=\\\"onClear()\\\" *ngIf=\\\"upload?.url?.length > 0 || showClear\\\"><mat-icon>clear</mat-icon></button>\\n              </div>\\n            </div>\\n\\n            <mat-action-row>\\n              <button mat-button color=\\\"accent\\\" type=\\\"button\\\" (click)=\\\"onSubmit('avatar')\\\">UPDATE</button>\\n            </mat-action-row>\\n\\n          </ng-template>\\n        </mat-expansion-panel>\\n\\n      </mat-accordion>\\n    </form>\\n  </div>\\n\\n</div>\\n\"","module.exports = \"#container #accordion-container {\\n  width: 80vw;\\n  margin: auto; }\\n  #container #accordion-container .mat-form-field {\\n    width: 100%; }\\n  #container #accordion-container #img-container {\\n    width: 100%;\\n    display: flex; }\\n  #container #accordion-container #img-container img {\\n      margin: 0 auto; }\\n  #container #accordion-container #btn-container {\\n    display: flex;\\n    flex-flow: column wrap; }\\n  #container #accordion-container #btn-container button {\\n      margin: 0 1vw; }\\n  #container #accordion-container #btn-container span {\\n      text-align: center; }\\n  #container #accordion-container .mat-action-row {\\n    padding-bottom: 0; }\\n\"","import { Component, OnInit, Inject, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { MatDialog, MatDialogRef, MatExpansionPanel } from '@angular/material';\nimport { Observable } from 'rxjs/Observable';\n\nimport { Upload } from '../../common/shared/models/model';\n\nimport { FirestoreService } from '../../common/core/services/firestore.service';\n\nimport { UpdateConfirmationDialogComponent } from '../../common/shared/components/update-confirmation-dialog/update-confirmation-dialog.component';\nimport { CloudQueueDialogComponent } from '../../common/shared/components/cloud-queue-dialog/cloud-queue-dialog.component';\nimport { ReauthDialogComponent } from '../../common/shared/components/reauth-dialog/reauth-dialog.component';\n\nconst EMAILPATTERN: RegExp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n@Component({\n  selector: 'app-preferences',\n  templateUrl: './preferences.component.html',\n  styleUrls: ['./preferences.component.scss']\n})\nexport class PreferencesComponent implements OnInit {\n\n  preferencesForm: FormGroup;\n  confirmationRef: MatDialogRef<UpdateConfirmationDialogComponent>;\n  cloudRef: MatDialogRef<CloudQueueDialogComponent>;\n  reauthRef: MatDialogRef<ReauthDialogComponent>;\n  @ViewChild('display')  displayPanel: MatExpansionPanel;\n  @ViewChild('email')    emailPanel: MatExpansionPanel;\n  @ViewChild('password') passwordPanel: MatExpansionPanel;\n  @ViewChild('avatar')   avatarPanel: MatExpansionPanel;\n  user: Observable<any>;\n  targetFiles: FileList;\n  upload: File;\n  file: Upload;\n  showClear: boolean = false;\n  newUrl: string = '';\n  current: string;\n\n  constructor(@Inject(FormBuilder) public fb: FormBuilder, private dialog: MatDialog, private firestore: FirestoreService) {\n    this.preferencesForm = fb.group({\n      updateDisplay: fb.group({\n        'display': [ '', [ Validators.required, Validators.minLength(6), CustomValidator.containAlpha ] ]\n      }),\n      updateEmail: fb.group({\n        'email': [ '', [ Validators.required, Validators.pattern(EMAILPATTERN) ] ]\n      }),\n      updatePassword: fb.group({\n        'password': [ '', [ Validators.required, Validators.minLength(6) ] ],\n        'confirm': [ '', [ Validators.required, this.confirmCheck.bind(this) ] ]\n      }),\n    })\n  }\n\n  ngOnInit() {\n    // this.displayPanel.open();\n    this.avatarPanel.open();\n    this.user = this.firestore.currentUser;\n    this.current = this.preferencesForm.value['updatePassword'].password;\n\n    this.preferencesForm.valueChanges.subscribe((response) => {\n      const password = response['updatePassword'].password;\n      this.current = password;\n    });\n\n    this.displayPanel.opened.subscribe(() => this.preferencesForm.reset());\n    this.emailPanel.opened.subscribe(() => this.preferencesForm.reset());\n    this.passwordPanel.opened.subscribe(() => this.preferencesForm.reset());\n    this.avatarPanel.opened.subscribe(() => this.preferencesForm.reset());\n  }\n\n  get displayError(): ValidationErrors {\n    return this.preferencesForm.get('updateDisplay').get('display').errors;\n  }\n\n  get emailError(): ValidationErrors {\n    return this.preferencesForm.get('updateEmail').get('email').errors;\n  }\n\n  get passwordError(): ValidationErrors {\n    return this.preferencesForm.get('updatePassword').get('password').errors;\n  }\n\n  get confirmError(): ValidationErrors {\n    return this.preferencesForm.get('updatePassword').get('confirm').errors;\n  }\n\n  confirmCheck(control: AbstractControl): ValidationErrors | null {\n    const condition = control.value === this.current;\n    return condition ? null : { isNotMatched: true };\n  }\n\n  onClear() {\n    this.showClear = false;\n    this.newUrl = '';\n    try {\n      this.upload['url'] = '';\n    } catch(e) { }\n  }\n\n  onChange(event: Event) {\n\n    try {\n\n      this.targetFiles = event.target['files'];\n      this.upload = this.targetFiles[0];\n\n      if (this.upload.type.includes('image'))\n        this.file = new Upload(this.upload);\n\n      const reader = new FileReader();\n      reader.onload = () => (this.upload['url'] = reader.result);\n      reader.readAsDataURL(this.upload);\n\n    } catch(e) { }\n\n  }\n\n  cloudQueue() {\n    this.cloudRef = this.dialog.open(CloudQueueDialogComponent, { data: {  } });\n    this.cloudRef.beforeClose().subscribe((data: any) => {\n      try {\n        this.newUrl = data.url;\n      } catch(e) { }\n    });\n    this.cloudRef.backdropClick().subscribe(() => (this.newUrl = ''));\n    this.cloudRef.keydownEvents().subscribe(() => (this.newUrl = ''));\n  }\n\n  onSubmit(option: string) {\n\n    switch(option) {\n      case 'display': {\n        const control = this.preferencesForm.get('updateDisplay').get('display').invalid;\n        if (control) { alert('Form invalid'); return; }\n\n        const form = this.preferencesForm.value['updateDisplay'];\n        this.confirmationRef = this.dialog.open(UpdateConfirmationDialogComponent, { data: { form, option: 'display' } });\n        break;\n      }\n      case 'email': {\n        const control = this.preferencesForm.get('updateEmail').get('email').invalid;\n        if (control) { alert('Form invalid'); return; }\n\n        this.reauthRef = this.dialog.open(ReauthDialogComponent);\n        this.reauthRef.beforeClose().subscribe((password: string) => {\n          let form = this.preferencesForm.value['updateEmail'];\n          form['password'] = password;\n          this.confirmationRef = this.dialog.open(UpdateConfirmationDialogComponent, { data: { form, option: 'email' } });\n        });\n\n        break;\n      }\n      case 'password': {\n        const control = this.preferencesForm.get('updatePassword').get('confirm').invalid;\n        if (control) { alert('Form invalid'); return; }\n\n        this.reauthRef = this.dialog.open(ReauthDialogComponent);\n        this.reauthRef.beforeClose().subscribe((password: string) => {\n          const form = this.preferencesForm.value['updatePassword'];\n          form['currentPassword'] = password;\n          this.confirmationRef = this.dialog.open(UpdateConfirmationDialogComponent, { data: { form, option: 'password' } });\n        });\n        break;\n      }\n      case 'avatar': {\n        const form = this.file;\n\n        try {\n          if (this.newUrl.length > 0) {\n            this.dialog.open(UpdateConfirmationDialogComponent, { data: { form, option: 'avatar', newUrl: this.newUrl } });\n          } else if (this.upload['url']) {\n            this.dialog.open(UpdateConfirmationDialogComponent, { data: { form, option: 'avatar', newUrl: this.newUrl } });\n          }\n        } catch(e) { }\n\n        break;\n      }\n    }\n\n  }\n\n}\n\nclass CustomValidator {\n  static containAlpha(control: AbstractControl): ValidationErrors | null {\n    const CONTAIN_LOWERCASE_REGEXP: RegExp = /[a-z]/;\n    return CONTAIN_LOWERCASE_REGEXP.test(control.value) ? null : { containsAlpha: true };\n  }\n  static containsNone(control: AbstractControl): ValidationErrors | null {\n    const condition = String(control.value).length !== 0;\n    return condition ? null : { containsNone: true };\n  }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { PreferencesRoutingModule } from './preferences-routing.module';\nimport { Material2Module } from '../../common/core/modules/material2.module';\n\nimport { PreferenceService } from '../../common/core/services/preference.service';\n\nimport { PreferencesComponent } from './preferences.component';\nimport { UpdateConfirmationDialogComponent } from '../../common/shared/components/update-confirmation-dialog/update-confirmation-dialog.component';\nimport { CloudQueueDialogComponent } from '../../common/shared/components/cloud-queue-dialog/cloud-queue-dialog.component';\nimport { ReauthDialogComponent } from '../../common/shared/components/reauth-dialog/reauth-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    PreferencesRoutingModule,\n    Material2Module\n  ],\n  declarations: [\n    PreferencesComponent,\n    UpdateConfirmationDialogComponent,\n    CloudQueueDialogComponent,\n    ReauthDialogComponent\n  ],\n  entryComponents: [\n    UpdateConfirmationDialogComponent,\n    CloudQueueDialogComponent,\n    ReauthDialogComponent\n  ],\n  providers: [\n    PreferenceService\n  ],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA\n  ]\n})\nexport class PreferencesModule { }\n"],"sourceRoot":""}